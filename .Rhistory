<<<<<<< Updated upstream
print("Do the reading!")
print("Do the reading!")
print("Hello World")
2+1+0
2 + 0 + 1
print("Hello World")
print("Do the reading!")
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Sofia"
# Assign your name to the variable `my_name`
my_name <- "Ivan"
# Assign your height (in inches) to a variable `my_height`
my_height <- 68
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 100
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Sofia"
# Assign your name to the variable `my_name`
my_name <- "Ivan"
# Assign your height (in inches) to a variable `my_height`
my_height <- 68
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 101
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Sofia"
# Assign your name to the variable `my_name`
my_name <- "Ivan"
# Assign your height (in inches) to a variable `my_height`
my_height <- 68
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 101
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 // puppy_price
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 % puppy_price
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 %% puppy_price
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000% / %puppy_price
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000%/%puppy_price
10%/%1
1000%/%100
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Sofia"
# Assign your name to the variable `my_name`
my_name <- "Ivan"
# Assign your height (in inches) to a variable `my_height`
my_height <- 68
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 100
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000%/%puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Sofia"
# Assign your name to the variable `my_name`
my_name <- "Ivan"
# Assign your height (in inches) to a variable `my_height`
my_height <- 68
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 101
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000%/%puppy_price
# Get the bills introduced by a certain senator
get_recently_introduced_bills <- function(name) {
senator_info <- get_senator_info(name)
member_id <- senator_info$id
uri <- paste0(base_uri, "/members/", member_id, "/bills/introduced.json")
response <- GET(uri, add_headers('X-API-Key' = propublica_key))
response_text <- content(response, "text")
response_data <- fromJSON(response_text)
response_df <- response_data$results$bills[[1]] %>%
select(bill_id, short_title)
}
get_recently_introduced_bills("Patty Murray")
# Get information about a specific senator
get_senator_info <- function(name) {
member_list_uri <- paste0(base_uri, member_list_endpoint)
members_list_result <- GET(member_list_uri, add_headers('X-API-Key' = propublica_key))
members_list_result_text <- content(members_list_result, "text")
members_list_result_data <- fromJSON(members_list_result_text)
members_list_result_df <- members_list_result_data$results$members[[1]]
senator_info <- filter(members_list_result_df, first_name == word(name, 1), last_name == word(name, -1)) %>%
select(first_name, middle_name, last_name, party, state, twitter_account, facebook_account, phone, fax, id)
as.list(senator_info)
}
get_recently_introduced_bills("Patty Murray")
library("httr")
library("jsonlite")
library("dplyr")
library("stringr")
source("apikeys.R")
# Create variable storing base URI
base_uri <- "https://api.propublica.org/congress/v1/"
# Endpoint for searching bills
bill_search_endpoint <- "bills/search.json?query="
# End point for 116th senate member list
member_list_endpoint <- "116/senate/members.json"
#Endpoint for the last 20 senate votes
recent_vote_endpoint <- "senate/votes/recent.json"
# GET dataframe for a given topic
get_bills_on_topic <- function(topic) {
uri <- paste0(base_uri, bill_search_endpoint, topic)
response <- GET(uri, add_headers('X-API-Key' = propublica_key))
response_text <- content(response, "text")
response_data <- fromJSON(response_text)
response_df <- response_data$results$bills[[1]]
response_df <- select(response_df, bill_id, short_title, sponsor_name, sponsor_state, sponsor_party, latest_major_action, govtrack_url)
top_n(response_df, 10)
}
# Get information about a specific bill
get_bill_information <- function(bill_id, congress_number) {
uri <- paste0(base_uri, congress_number, "/bills/", bill_id, ".json")
result <- GET(uri, add_headers('X-API-Key' = propublica_key))
result_text <- content(result, "text")
result_data <- fromJSON(result_text)
result_df <- result_data$results
result_list <- as.list(result_df)
}
# Get information about a specific senator
get_senator_info <- function(name) {
member_list_uri <- paste0(base_uri, member_list_endpoint)
members_list_result <- GET(member_list_uri, add_headers('X-API-Key' = propublica_key))
members_list_result_text <- content(members_list_result, "text")
members_list_result_data <- fromJSON(members_list_result_text)
members_list_result_df <- members_list_result_data$results$members[[1]]
senator_info <- filter(members_list_result_df, first_name == word(name, 1), last_name == word(name, -1)) %>%
select(first_name, middle_name, last_name, party, state, twitter_account, facebook_account, phone, fax, id)
as.list(senator_info)
}
# Get the bills introduced by a certain senator
get_recently_introduced_bills <- function(name) {
senator_info <- get_senator_info(name)
member_id <- senator_info$id
uri <- paste0(base_uri, "/members/", member_id, "/bills/introduced.json")
response <- GET(uri, add_headers('X-API-Key' = propublica_key))
response_text <- content(response, "text")
response_data <- fromJSON(response_text)
response_df <- response_data$results$bills[[1]] %>%
select(bill_id, short_title)
}
get_recently_introduced_bills("Patty Murray")
# Get the last 20 most recent vote majority position for the opposing party
get_opposing_majority_position <- function(name) {
uri <- paste0(base_uri, recent_vote_endpoint)
result <- GET(uri, add_headers('X-API-Key' = propublica_key))
result_text <- content(result, "text")
result_data <- fromJSON(result_text)
senator_info <- get_senator_info(name)
if (senator_info$party == "D") {
result_df <- result_data$results$votes$republican
}
else {
result_df <- result_data$results$votes$democratic
}
select(result_df, majority_position)
}
# Get the voting position for a given senator for the 20 most recent votes
get_senator_vote_positions <- function(name) {
senator_info <- get_senator_info(name)
member_id <- senator_info$id
uri <- paste0(base_uri, "members/", member_id, "/votes.json")
result <- GET(uri, add_headers('X-API-Key' = propublica_key))
result_text <- content(result, "text")
result_data <- fromJSON(result_text)
result_df <- result_data$results$votes[[1]]
select(result_df, position)
}
# Compare the majority position of the opposing party to the voting position of a given senator
# For the most recent 20 votes
compare_senator_vote_to_opposing_majority <- function(name) {
opposing_majority <- get_opposing_majority_position(name)
senator_position <- get_senator_vote_positions(name)
opposing_majority_vector <- as.vector(opposing_majority$majority_position)
senator_position_vector <- as.vector(senator_position$position)
comparison_vector <- opposing_majority_vector == senator_position_vector
true_count <- length(comparison_vector[comparison_vector == TRUE])
(true_count/20) * 100
}
get_recently_introduced_bills("Patty Murray")
print(propublica_key)
source("apikeys.R")
shiny::runApp('Info201/info201-final-project')
shiny::runApp()
# load and rename world population data
pop_data <- read.csv("data/world_pop.csv", stringsAsFactors = F) %>%
select(Country.Name, X2015, X2016, X2017)
pop_data <- read.csv("data/world_pop.csv", stringsAsFactors = F)
View(pop_data)
View(pop_data)
runApp()
=======
na.omit() %>%
rename(gdp2016 = "2016") %>%
left_join(joined_data %>% select(id, region.value), by = c("iso3" = "id"))
dropbox_names <- c("World", unique(joined_with_gdp$region.value)[!is.na(unique(joined_with_gdp$region.value))])
#calculate pca for given region. use 'world' for all
pca_for_region <- function(region) {
res <- ""
if (region == "World") {
res <- prcomp(joined_with_gdp %>% select(-iso3, -gdp2016, -CountryName, -region.value))
} else {
res <- prcomp(joined_with_gdp %>% filter(region.value == region) %>% select(-iso3, -gdp2016, -CountryName, -region.value))
}
c(res, joined_with_gdp %>% select(-iso3, -gdp2016, -CountryName, -region.value))
}
shiny::runApp('~/GitHub/info201-final-project')
runApp('~/GitHub/info201-final-project')
dropbox_names <- c("World", unique(joined_with_gdp$region.value)[!is.na(unique(joined_with_gdp$region.value))])
read.csv(file = "data/gdp.csv", stringsAsFactors = FALSE)
setwd(C:\Users\Cooper\Documents\GitHub\info201-final-project)
setwd("C:\Users\Cooper\Documents\GitHub\info201-final-project")
setwd("C:/Users/Cooper/Documents/GitHub/info201-final-project")
# Tal Wolman, Ben Weber, Ivan Trindev, Cooper Teixeira
# INFO 201 Final Project
# TA: Andrey Butenko
# Section AE
# March 8, 2019
library(dplyr)
library(knitr)
library(jsonlite)
library(httr)
###############
## Section 2 ##
###############
# read and process csv file for happiness data
world_happiness_data <- read.csv(file = "data/2017.csv", stringsAsFactors = FALSE)
filtered_world_happiness_data <- select(world_happiness_data, Country, Happiness.Rank, Happiness.Score, Economy..GDP.per.Capita.) %>%
filter(Happiness.Score > 7)
happiness_col_names <- c("Country Name", "Happiness Rank", "Happiness Score", "Economy")
colnames(filtered_world_happiness_data) <- happiness_col_names
# read and process data from World Bank by fetching from API
base_uri <- "http://api.worldbank.org/v2/"
response <- GET(paste0(base_uri, "country"), query = list("format" = "json", "per_page" = "350"))
response_information <- content(response, "text")
parsed_body_information <- fromJSON(response_information)
data_for_world <- flatten(parsed_body_information[[2]]) %>% filter(!grepl("Aggregates", region.value))
filtered_data_for_europe_central_asia <- select(data_for_world, id, name, region.value, incomeLevel.value) %>%
filter(region.value == "Europe & Central Asia")
europe_asia_col_names <- c("ID", "Country Name", "Region Name", "Income Level")
colnames(filtered_data_for_europe_central_asia) <- europe_asia_col_names
###############
## Section 3 ##
###############
# Get crucial information from the world happiness data set
world_happiness_crucial_info <- world_happiness_data %>%
select(
Country, Happiness.Score, Economy..GDP.per.Capita., Family, Health..Life.Expectancy.,
Freedom, Generosity, Trust..Government.Corruption.
)
# Change colnames in data set
world_happiness_crucial_col_names <- c("Country", "Score", "Economy", "Family", "Health", "Freedom", "Generosity", "Gov.Trust")
colnames(world_happiness_crucial_info) <- world_happiness_crucial_col_names
# Create summary for crucial world happiness information
world_happiness_summary <- summary(world_happiness_crucial_info %>% select(-Country))
# Create a numeric representation of the income levels of countries
data_for_world_ex <- data_for_world %>% mutate(income_as_numeric = ifelse(grepl("HIC", incomeLevel.id), "6",
ifelse(grepl("UMC", incomeLevel.id), 5,
ifelse(grepl("MIC", incomeLevel.id), 4,
ifelse(grepl("LMC", incomeLevel.id), 3,
ifelse(grepl("LMY", incomeLevel.id), 2,
ifelse(grepl("LIC", incomeLevel.id), 1, NA)
)
)
)
)
))
data_for_world_ex$income_as_numeric <- as.numeric(data_for_world_ex$income_as_numeric)
world_income_summary <- summary(data_for_world_ex %>% select(income_as_numeric) %>% na.omit())
# Join the happiness data and income data by country name
joined_data <- left_join(data_for_world_ex, world_happiness_crucial_info, by = c("name" = "Country")) %>% na.omit()
# Find the saddest country that is in the high income level bracket
saddest_rich_country <- joined_data %>% filter(income_as_numeric == 6) %>% filter(Score == min(Score)) %>% select(name)
# Arrange the data by which countries have the largest difference in their income level and happiness score
arranged_data <- joined_data %>% mutate(income_happiness_diff = income_as_numeric - Score) %>% arrange(desc(income_happiness_diff))
# Group data by income level and find average happiness score
average_happiness_by_income_level <- joined_data %>%
group_by(incomeLevel.value) %>%
summarize(average_happiness = mean(Score)) %>%
arrange(average_happiness)
# Find the average happiness level and income level for each region
average_happiness_income_by_region <- joined_data %>%
group_by(region.value) %>%
summarize(
average_happiness = mean(Score),
average_income = mean(income_as_numeric)
) %>%
arrange(average_income)
# Join the 2015 and 2017 happiness data
world_happiness_data_2015 <- read.csv(file = "data/2015.csv", stringsAsFactors = FALSE)
world_happiness_2015_2017 <- left_join(world_happiness_data_2015, world_happiness_data, by = "Country")
# Find the difference in economy and happiness in the two years
world_happiness_2015_2017 <- world_happiness_2015_2017 %>%
select(Country, Happiness.Score.x, Economy..GDP.per.Capita..x, Happiness.Score.y, Economy..GDP.per.Capita..y) %>%
mutate(
Happiness_change = Happiness.Score.y - Happiness.Score.x,
Economy_change = Economy..GDP.per.Capita..y - Economy..GDP.per.Capita..x
)
# Find the top 5 countries with largest happiness change
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
# Find the top 5 countries with largest economic change
largest_economy_change <- world_happiness_2015_2017 %>%
arrange(abs(Economy_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
#Section 4
gdp_data <- read.csv(file = "data/gdp.csv", stringsAsFactors = FALSE) %>%
spread(key = Year, value = Value) %>%
select(CountryName, CountryCode, "2016") %>%
na.omit()
with_iso3 <- world_happiness_crucial_info %>% mutate(iso3 = if_else(Country == "United States", "USA",
if_else(Country == "United Kingdom", "GBR",
iso.alpha(n = 3, x = world_happiness_crucial_info$Country))))
joined_with_gdp <- left_join(with_iso3[-1], gdp_data, by = c("iso3" = "CountryCode")) %>%
na.omit() %>%
rename(gdp2016 = "2016") %>%
left_join(joined_data %>% select(id, region.value), by = c("iso3" = "id"))
dropbox_names <- c("World", unique(joined_with_gdp$region.value)[!is.na(unique(joined_with_gdp$region.value))])
#calculate pca for given region. use 'world' for all
pca_for_region <- function(region) {
res <- ""
if (region == "World") {
res <- prcomp(joined_with_gdp %>% select(-iso3, -gdp2016, -CountryName, -region.value))
} else {
res <- prcomp(joined_with_gdp %>% filter(region.value == region) %>% select(-iso3, -gdp2016, -CountryName, -region.value))
}
c(res, joined_with_gdp %>% select(-iso3, -gdp2016, -CountryName, -region.value))
}
# Tal Wolman, Ben Weber, Ivan Trindev, Cooper Teixeira
# INFO 201 Final Project
# TA: Andrey Butenko
# Section AE
# March 8, 2019
library(dplyr)
library(knitr)
library(jsonlite)
library(httr)
###############
## Section 2 ##
###############
# read and process csv file for happiness data
world_happiness_data <- read.csv(file = "data/2017.csv", stringsAsFactors = FALSE)
filtered_world_happiness_data <- select(world_happiness_data, Country, Happiness.Rank, Happiness.Score, Economy..GDP.per.Capita.) %>%
filter(Happiness.Score > 7)
happiness_col_names <- c("Country Name", "Happiness Rank", "Happiness Score", "Economy")
colnames(filtered_world_happiness_data) <- happiness_col_names
# read and process data from World Bank by fetching from API
base_uri <- "http://api.worldbank.org/v2/"
response <- GET(paste0(base_uri, "country"), query = list("format" = "json", "per_page" = "350"))
response_information <- content(response, "text")
parsed_body_information <- fromJSON(response_information)
data_for_world <- flatten(parsed_body_information[[2]]) %>% filter(!grepl("Aggregates", region.value))
filtered_data_for_europe_central_asia <- select(data_for_world, id, name, region.value, incomeLevel.value) %>%
filter(region.value == "Europe & Central Asia")
europe_asia_col_names <- c("ID", "Country Name", "Region Name", "Income Level")
colnames(filtered_data_for_europe_central_asia) <- europe_asia_col_names
###############
## Section 3 ##
###############
# Get crucial information from the world happiness data set
world_happiness_crucial_info <- world_happiness_data %>%
select(
Country, Happiness.Score, Economy..GDP.per.Capita., Family, Health..Life.Expectancy.,
Freedom, Generosity, Trust..Government.Corruption.
)
# Change colnames in data set
world_happiness_crucial_col_names <- c("Country", "Score", "Economy", "Family", "Health", "Freedom", "Generosity", "Gov.Trust")
colnames(world_happiness_crucial_info) <- world_happiness_crucial_col_names
# Create summary for crucial world happiness information
world_happiness_summary <- summary(world_happiness_crucial_info %>% select(-Country))
# Create a numeric representation of the income levels of countries
data_for_world_ex <- data_for_world %>% mutate(income_as_numeric = ifelse(grepl("HIC", incomeLevel.id), "6",
ifelse(grepl("UMC", incomeLevel.id), 5,
ifelse(grepl("MIC", incomeLevel.id), 4,
ifelse(grepl("LMC", incomeLevel.id), 3,
ifelse(grepl("LMY", incomeLevel.id), 2,
ifelse(grepl("LIC", incomeLevel.id), 1, NA)
)
)
)
)
))
data_for_world_ex$income_as_numeric <- as.numeric(data_for_world_ex$income_as_numeric)
world_income_summary <- summary(data_for_world_ex %>% select(income_as_numeric) %>% na.omit())
# Join the happiness data and income data by country name
joined_data <- left_join(data_for_world_ex, world_happiness_crucial_info, by = c("name" = "Country")) %>% na.omit()
# Find the saddest country that is in the high income level bracket
saddest_rich_country <- joined_data %>% filter(income_as_numeric == 6) %>% filter(Score == min(Score)) %>% select(name)
# Arrange the data by which countries have the largest difference in their income level and happiness score
arranged_data <- joined_data %>% mutate(income_happiness_diff = income_as_numeric - Score) %>% arrange(desc(income_happiness_diff))
# Group data by income level and find average happiness score
average_happiness_by_income_level <- joined_data %>%
group_by(incomeLevel.value) %>%
summarize(average_happiness = mean(Score)) %>%
arrange(average_happiness)
# Find the average happiness level and income level for each region
average_happiness_income_by_region <- joined_data %>%
group_by(region.value) %>%
summarize(
average_happiness = mean(Score),
average_income = mean(income_as_numeric)
) %>%
arrange(average_income)
# Join the 2015 and 2017 happiness data
world_happiness_data_2015 <- read.csv(file = "data/2015.csv", stringsAsFactors = FALSE)
world_happiness_2015_2017 <- left_join(world_happiness_data_2015, world_happiness_data, by = "Country")
# Find the difference in economy and happiness in the two years
world_happiness_2015_2017 <- world_happiness_2015_2017 %>%
select(Country, Happiness.Score.x, Economy..GDP.per.Capita..x, Happiness.Score.y, Economy..GDP.per.Capita..y) %>%
mutate(
Happiness_change = Happiness.Score.y - Happiness.Score.x,
Economy_change = Economy..GDP.per.Capita..y - Economy..GDP.per.Capita..x
)
# Find the top 5 countries with largest happiness change
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
# Find the top 5 countries with largest economic change
largest_economy_change <- world_happiness_2015_2017 %>%
arrange(abs(Economy_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
#Section 4
gdp_data <- read.csv(file = "data/gdp.csv", stringsAsFactors = FALSE) %>%
spread(key = Year, value = Value) %>%
select(CountryName, CountryCode, "2016") %>%
na.omit()
with_iso3 <- world_happiness_crucial_info %>% mutate(iso3 = if_else(Country == "United States", "USA",
if_else(Country == "United Kingdom", "GBR",
iso.alpha(n = 3, x = world_happiness_crucial_info$Country))))
joined_with_gdp <- left_join(with_iso3[-1], gdp_data, by = c("iso3" = "CountryCode")) %>%
na.omit() %>%
rename(gdp2016 = "2016") %>%
left_join(joined_data %>% select(id, region.value), by = c("iso3" = "id"))
dropbox_names <- c("World", unique(joined_with_gdp$region.value)[!is.na(unique(joined_with_gdp$region.value))])
#calculate pca for given region. use 'world' for all
pca_for_region <- function(region) {
res <- ""
if (region == "World") {
res <- prcomp(joined_with_gdp %>% select(-iso3, -gdp2016, -CountryName, -region.value))
} else {
res <- prcomp(joined_with_gdp %>% filter(region.value == region) %>% select(-iso3, -gdp2016, -CountryName, -region.value))
}
c(res, joined_with_gdp %>% select(-iso3, -gdp2016, -CountryName, -region.value))
}
library("dplyr")
# Tal Wolman, Ben Weber, Ivan Trindev, Cooper Teixeira
# INFO 201 Final Project
# TA: Andrey Butenko
# Section AE
# March 8, 2019
library(dplyr)
library(knitr)
library(jsonlite)
library(httr)
###############
## Section 2 ##
###############
# read and process csv file for happiness data
world_happiness_data <- read.csv(file = "data/2017.csv", stringsAsFactors = FALSE)
filtered_world_happiness_data <- select(world_happiness_data, Country, Happiness.Rank, Happiness.Score, Economy..GDP.per.Capita.) %>%
filter(Happiness.Score > 7)
happiness_col_names <- c("Country Name", "Happiness Rank", "Happiness Score", "Economy")
colnames(filtered_world_happiness_data) <- happiness_col_names
# read and process data from World Bank by fetching from API
base_uri <- "http://api.worldbank.org/v2/"
response <- GET(paste0(base_uri, "country"), query = list("format" = "json", "per_page" = "350"))
response_information <- content(response, "text")
parsed_body_information <- fromJSON(response_information)
data_for_world <- flatten(parsed_body_information[[2]]) %>% filter(!grepl("Aggregates", region.value))
filtered_data_for_europe_central_asia <- select(data_for_world, id, name, region.value, incomeLevel.value) %>%
filter(region.value == "Europe & Central Asia")
europe_asia_col_names <- c("ID", "Country Name", "Region Name", "Income Level")
colnames(filtered_data_for_europe_central_asia) <- europe_asia_col_names
###############
## Section 3 ##
###############
# Get crucial information from the world happiness data set
world_happiness_crucial_info <- world_happiness_data %>%
select(
Country, Happiness.Score, Economy..GDP.per.Capita., Family, Health..Life.Expectancy.,
Freedom, Generosity, Trust..Government.Corruption.
)
# Change colnames in data set
world_happiness_crucial_col_names <- c("Country", "Score", "Economy", "Family", "Health", "Freedom", "Generosity", "Gov.Trust")
colnames(world_happiness_crucial_info) <- world_happiness_crucial_col_names
# Create summary for crucial world happiness information
world_happiness_summary <- summary(world_happiness_crucial_info %>% select(-Country))
# Create a numeric representation of the income levels of countries
data_for_world_ex <- data_for_world %>% mutate(income_as_numeric = ifelse(grepl("HIC", incomeLevel.id), "6",
ifelse(grepl("UMC", incomeLevel.id), 5,
ifelse(grepl("MIC", incomeLevel.id), 4,
ifelse(grepl("LMC", incomeLevel.id), 3,
ifelse(grepl("LMY", incomeLevel.id), 2,
ifelse(grepl("LIC", incomeLevel.id), 1, NA)
)
)
)
)
))
data_for_world_ex$income_as_numeric <- as.numeric(data_for_world_ex$income_as_numeric)
world_income_summary <- summary(data_for_world_ex %>% select(income_as_numeric) %>% na.omit())
# Join the happiness data and income data by country name
joined_data <- left_join(data_for_world_ex, world_happiness_crucial_info, by = c("name" = "Country")) %>% na.omit()
# Find the saddest country that is in the high income level bracket
saddest_rich_country <- joined_data %>% filter(income_as_numeric == 6) %>% filter(Score == min(Score)) %>% select(name)
# Arrange the data by which countries have the largest difference in their income level and happiness score
arranged_data <- joined_data %>% mutate(income_happiness_diff = income_as_numeric - Score) %>% arrange(desc(income_happiness_diff))
# Group data by income level and find average happiness score
average_happiness_by_income_level <- joined_data %>%
group_by(incomeLevel.value) %>%
summarize(average_happiness = mean(Score)) %>%
arrange(average_happiness)
# Find the average happiness level and income level for each region
average_happiness_income_by_region <- joined_data %>%
group_by(region.value) %>%
summarize(
average_happiness = mean(Score),
average_income = mean(income_as_numeric)
) %>%
arrange(average_income)
# Join the 2015 and 2017 happiness data
world_happiness_data_2015 <- read.csv(file = "data/2015.csv", stringsAsFactors = FALSE)
world_happiness_2015_2017 <- left_join(world_happiness_data_2015, world_happiness_data, by = "Country")
# Find the difference in economy and happiness in the two years
world_happiness_2015_2017 <- world_happiness_2015_2017 %>%
select(Country, Happiness.Score.x, Economy..GDP.per.Capita..x, Happiness.Score.y, Economy..GDP.per.Capita..y) %>%
mutate(
Happiness_change = Happiness.Score.y - Happiness.Score.x,
Economy_change = Economy..GDP.per.Capita..y - Economy..GDP.per.Capita..x
)
# Find the top 5 countries with largest happiness change
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
# Find the top 5 countries with largest economic change
largest_economy_change <- world_happiness_2015_2017 %>%
arrange(abs(Economy_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
#Section 4
gdp_data <- read.csv(file = "data/gdp.csv", stringsAsFactors = FALSE) %>%
spread(key = Year, value = Value) %>%
select(CountryName, CountryCode, "2016") %>%
na.omit()
with_iso3 <- world_happiness_crucial_info %>% mutate(iso3 = if_else(Country == "United States", "USA",
if_else(Country == "United Kingdom", "GBR",
iso.alpha(n = 3, x = world_happiness_crucial_info$Country))))
joined_with_gdp <- left_join(with_iso3[-1], gdp_data, by = c("iso3" = "CountryCode")) %>%
na.omit() %>%
rename(gdp2016 = "2016") %>%
left_join(joined_data %>% select(id, region.value), by = c("iso3" = "id"))
dropbox_names <- c("World", unique(joined_with_gdp$region.value)[!is.na(unique(joined_with_gdp$region.value))])
#calculate pca for given region. use 'world' for all
pca_for_region <- function(region) {
res <- ""
if (region == "World") {
res <- prcomp(joined_with_gdp %>% select(-iso3, -gdp2016, -CountryName, -region.value))
} else {
res <- prcomp(joined_with_gdp %>% filter(region.value == region) %>% select(-iso3, -gdp2016, -CountryName, -region.value))
}
c(res, joined_with_gdp %>% select(-iso3, -gdp2016, -CountryName, -region.value))
}
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
library(knitr)
library(jsonlite)
library(httr)
flatten()
?flatten
# Tal Wolman, Ben Weber, Ivan Trindev, Cooper Teixeira
# INFO 201 Final Project
# TA: Andrey Butenko
# Section AE
# March 8, 2019
library(dplyr)
library(knitr)
library(jsonlite)
library(httr)
###############
## Section 2 ##
###############
# read and process csv file for happiness data
world_happiness_data <- read.csv(file = "data/2017.csv", stringsAsFactors = FALSE)
filtered_world_happiness_data <- select(world_happiness_data, Country, Happiness.Rank, Happiness.Score, Economy..GDP.per.Capita.) %>%
filter(Happiness.Score > 7)
happiness_col_names <- c("Country Name", "Happiness Rank", "Happiness Score", "Economy")
colnames(filtered_world_happiness_data) <- happiness_col_names
# read and process data from World Bank by fetching from API
base_uri <- "http://api.worldbank.org/v2/"
response <- GET(paste0(base_uri, "country"), query = list("format" = "json", "per_page" = "350"))
response_information <- content(response, "text")
parsed_body_information <- fromJSON(response_information)
data_for_world <- flatten(parsed_body_information[[2]]) %>% filter(!grepl("Aggregates", region.value))
filtered_data_for_europe_central_asia <- select(data_for_world, id, name, region.value, incomeLevel.value) %>%
filter(region.value == "Europe & Central Asia")
europe_asia_col_names <- c("ID", "Country Name", "Region Name", "Income Level")
colnames(filtered_data_for_europe_central_asia) <- europe_asia_col_names
###############
## Section 3 ##
###############
# Get crucial information from the world happiness data set
world_happiness_crucial_info <- world_happiness_data %>%
select(
Country, Happiness.Score, Economy..GDP.per.Capita., Family, Health..Life.Expectancy.,
Freedom, Generosity, Trust..Government.Corruption.
)
# Change colnames in data set
world_happiness_crucial_col_names <- c("Country", "Score", "Economy", "Family", "Health", "Freedom", "Generosity", "Gov.Trust")
colnames(world_happiness_crucial_info) <- world_happiness_crucial_col_names
# Create summary for crucial world happiness information
world_happiness_summary <- summary(world_happiness_crucial_info %>% select(-Country))
# Create a numeric representation of the income levels of countries
data_for_world_ex <- data_for_world %>% mutate(income_as_numeric = ifelse(grepl("HIC", incomeLevel.id), "6",
ifelse(grepl("UMC", incomeLevel.id), 5,
ifelse(grepl("MIC", incomeLevel.id), 4,
ifelse(grepl("LMC", incomeLevel.id), 3,
ifelse(grepl("LMY", incomeLevel.id), 2,
ifelse(grepl("LIC", incomeLevel.id), 1, NA)
)
)
)
)
))
data_for_world_ex$income_as_numeric <- as.numeric(data_for_world_ex$income_as_numeric)
world_income_summary <- summary(data_for_world_ex %>% select(income_as_numeric) %>% na.omit())
# Join the happiness data and income data by country name
joined_data <- left_join(data_for_world_ex, world_happiness_crucial_info, by = c("name" = "Country")) %>% na.omit()
# Find the saddest country that is in the high income level bracket
saddest_rich_country <- joined_data %>% filter(income_as_numeric == 6) %>% filter(Score == min(Score)) %>% select(name)
# Arrange the data by which countries have the largest difference in their income level and happiness score
arranged_data <- joined_data %>% mutate(income_happiness_diff = income_as_numeric - Score) %>% arrange(desc(income_happiness_diff))
# Group data by income level and find average happiness score
average_happiness_by_income_level <- joined_data %>%
group_by(incomeLevel.value) %>%
summarize(average_happiness = mean(Score)) %>%
arrange(average_happiness)
# Find the average happiness level and income level for each region
average_happiness_income_by_region <- joined_data %>%
group_by(region.value) %>%
summarize(
average_happiness = mean(Score),
average_income = mean(income_as_numeric)
) %>%
arrange(average_income)
# Join the 2015 and 2017 happiness data
world_happiness_data_2015 <- read.csv(file = "data/2015.csv", stringsAsFactors = FALSE)
world_happiness_2015_2017 <- left_join(world_happiness_data_2015, world_happiness_data, by = "Country")
# Find the difference in economy and happiness in the two years
world_happiness_2015_2017 <- world_happiness_2015_2017 %>%
select(Country, Happiness.Score.x, Economy..GDP.per.Capita..x, Happiness.Score.y, Economy..GDP.per.Capita..y) %>%
mutate(
Happiness_change = Happiness.Score.y - Happiness.Score.x,
Economy_change = Economy..GDP.per.Capita..y - Economy..GDP.per.Capita..x
)
# Find the top 5 countries with largest happiness change
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
# Find the top 5 countries with largest economic change
largest_economy_change <- world_happiness_2015_2017 %>%
arrange(abs(Economy_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
#Section 4
gdp_data <- read.csv(file = "data/gdp.csv", stringsAsFactors = FALSE) %>%
spread(key = Year, value = Value) %>%
select(CountryName, CountryCode, "2016") %>%
na.omit()
with_iso3 <- world_happiness_crucial_info %>% mutate(iso3 = if_else(Country == "United States", "USA",
if_else(Country == "United Kingdom", "GBR",
iso.alpha(n = 3, x = world_happiness_crucial_info$Country))))
joined_with_gdp <- left_join(with_iso3[-1], gdp_data, by = c("iso3" = "CountryCode")) %>%
na.omit() %>%
rename(gdp2016 = "2016") %>%
left_join(joined_data %>% select(id, region.value), by = c("iso3" = "id"))
dropbox_names <- c("World", unique(joined_with_gdp$region.value)[!is.na(unique(joined_with_gdp$region.value))])
#calculate pca for given region. use 'world' for all
pca_for_region <- function(region) {
res <- ""
if (region == "World") {
res <- prcomp(joined_with_gdp %>% select(-iso3, -gdp2016, -CountryName, -region.value))
} else {
res <- prcomp(joined_with_gdp %>% filter(region.value == region) %>% select(-iso3, -gdp2016, -CountryName, -region.value))
}
c(res, joined_with_gdp %>% select(-iso3, -gdp2016, -CountryName, -region.value))
}
>>>>>>> Stashed changes
runApp()
