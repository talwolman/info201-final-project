source("analysis.R")
source(analysis.R)
setwd("~/Documents/UW/Winter 2019/INFO 201/info201-final-project")
source("analysis.R")
library("shiny")
library("jsonlite")
library("httr")
library("shiny")
library("ggplot2")
library("dplyr")
library("tidyr")
library("knitr")
library("jsonlite")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library("maps")
View(largest_economy_change)
is.data.frame(largest_economy_change)
countries <- map_data("world")
country_codes <- iso.alpha(countries[["region"]], n = 3)
countries <- mutate(countries, country_codes = country_codes)
View(countries)
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
View(largest_happiness_change)
happiness_isos <- iso.alpha(countries[["Country"]], n = 3)
largest_happiness_change <- mutate(largest_happiness_change, iso_codes = iso_codes)
largest_happiness_change <- mutate(largest_happiness_change, happiness_isos = happiness_isos)
happiness_isos <- iso.alpha(countries[["Country"]], n = 3)
largest_happiness_change <- mutate(largest_happiness_change, happiness_isos = happiness_isos)
View(happiness_isos)
happiness_isos <- iso.alpha(largest_happiness_change[["Country"]], n = 3)
View(happiness_isos)
largest_happiness_change <- mutate(largest_happiness_change, happiness_isos = happiness_isos)
View(largest_happiness_change)
left_join(largest_happiness_change, countries, by = c("country_codes" = "happiness_isos"))
largest_happiness_change <- left_join(largest_happiness_change, countries, by = c("country_codes" = "happiness_isos"))
largest_happiness_change <- left_join(largest_happiness_change, countries, by = c("happiness_isos" = "country_codes"))
View(largest_happiness_change)
countries <- map_data("world")
country_codes <- iso.alpha(countries[["region"]], n = 3)
countries <- mutate(countries, country_codes = country_codes)
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
colnames(largest_happiness_change) <- c("interest.country")
happiness_isos <- iso.alpha(largest_happiness_change[["Country"]], n = 3)
largest_happiness_change <- mutate(largest_happiness_change, happiness_isos = happiness_isos)
setwd("~/Documents/UW/Winter 2019/INFO 201/info201-final-project")
countries <- map_data("world")
country_codes <- iso.alpha(countries[["region"]], n = 3)
countries <- mutate(countries, country_codes = country_codes)
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
colnames(largest_happiness_change) <- c("interest.country")
happiness_isos <- iso.alpha(largest_happiness_change[["Country"]], n = 3)
largest_happiness_change <- mutate(largest_happiness_change, happiness_isos = happiness_isos)
happiness_isos <- iso.alpha(largest_happiness_change[["interest.country"]], n = 3)
largest_happiness_change <- mutate(largest_happiness_change, happiness_isos = happiness_isos)
largest_happiness_change <- left_join(largest_happiness_change, countries, by = c("happiness_isos" = "country_codes"))
View(largest_happiness_change)
countries <- map_data("world")
country_codes <- iso.alpha(countries[["region"]], n = 3)
countries <- mutate(countries, country_codes = country_codes)
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
ggplot(data = countries) +
scale_color_brewer(palette = "Set3") +
geom_polygon(mapping = aes(x = long, y = lat, fill))
ggplot(data = countries) +
scale_color_brewer(palette = "Set3") +
geom_polygon(mapping = aes(x = long, y = lat, group = group))
ggplot(data = countries) +
scale_color_brewer(palette = "Set3") +
geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = largest_happiness_change[["Country"]]))
ggplot(data = countries) +
scale_color_brewer(palette = "Set3") +
geom_polygon(mapping = aes(x = long, y = lat, group = largest_happiness_change[["Country"]]))
countries <- map_data("world")
country_codes <- iso.alpha(countries[["region"]], n = 3)
countries <- mutate(countries, country_codes = country_codes)
View(countries)
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
happiness_isos <- iso.alpha(largest_happiness_change[["interest.country"]], n = 3)
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
happiness_isos <- iso.alpha(largest_happiness_change[["interest.country"]], n = 3)
View(largest_happiness_change)
countries[["region"]] == largest_happiness_change[["Country"]]
View(countries[["region"]] == largest_happiness_change[["Country"]])
countries <- map_data("world")
country_codes <- iso.alpha(countries[["region"]], n = 3)
countries <- mutate(countries, country_codes = country_codes)
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
largest_happiness_change
any(largest_happiness_change == "Israel")
any(largest_happiness_change == "Malawi")
ggplot(data = countries) +
scale_color_brewer(palette = "Set3") +
geom_polygon(mapping = aes(x = long, y = lat, group = group))
ggplot(data = countries) +
scale_color_brewer(palette = "Set3") +
geom_polygon(mapping = aes(x = long, y = lat, fill = 5))
ggplot(data = countries) +
scale_color_brewer(palette = "Set3") +
geom_polygon(mapping = aes(x = long, y = lat, fill = largest_happiness_change))
ggplot(data = countries) +
scale_color_brewer(palette = "Set3") +
geom_polygon(mapping = aes(x = long, y = lat, fill = largest_happiness_change))
ggplot(data = countries) +
scale_color_brewer(palette = "Set3") +
geom_polygon(mapping = aes(x = long, y = lat, fill = largest_happiness_change$Country))
> vector(mode = TRUE, length = 10)
> vector("TRUE", length = 10)
vector("TRUE", length = 10)
vector( mode = "TRUE", length = 10)
vector( mode = BOOL, length = 10)
vector(1:10)
c(1:10)
largest_happiness_change$fill = c(1:5)
largest_happiness_change
ggplot(data = countries) +
scale_color_brewer(palette = "Set3") +
geom_polygon(mapping = aes(x = long, y = lat, fill = largest_happiness_change$fill))
happiness_isos <- iso.alpha(largest_happiness_change[["interest.country"]], n = 3)
largest_happiness_change <- mutate(largest_happiness_change, happiness_isos = happiness_isos)
happiness_isos <- iso.alpha(largest_happiness_change[["Country"]], n = 3)
largest_happiness_change <- mutate(largest_happiness_change, happiness_isos = happiness_isos)
fill <- c(TRUE)
logical(length = 5)
vector(mode = "logical", length = 5)
ggplot(data = countries) +
scale_color_brewer(palette = "Set3") +
geom_polygon(mapping = aes(x = long, y = lat, fill = red))
ggplot(data = countries) +
scale_color_brewer(palette = "Set3") +
geom_polygon(mapping = aes(x = long, y = lat, group = group))
ggplot(data = countries) +
scale_color_brewer(palette = "Set3") +
geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = group))
largest_happiness_change$fill_info <- !vector(, 5)
largest_happiness_change$fill_info
happiness_isos <- iso.alpha(largest_happiness_change[["Country"]], n = 3)
largest_happiness_change <- mutate(largest_happiness_change, happiness_isos = happiness_isos)
largest_happiness_change <- mutate(largest_happiness_change, fill_info = fill_info)
View(largest_happiness_change)
largest_happiness_change <- left_join(largest_happiness_change, countries, by = c("happiness_isos" = "country_codes"))
View(largest_happiness_change)
ggplot(data = countries) +
scale_color_brewer(palette = "Set3") +
geom_polygon(mapping = aes(x = long, y = lat, fill = fill_info))
countries <- map_data("world")
country_codes <- iso.alpha(countries[["region"]], n = 3)
countries <- mutate(countries, country_codes = country_codes)
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
largest_happiness_change$fill_info <- !vector(, 5)
happiness_isos <- iso.alpha(largest_happiness_change[["Country"]], n = 3)
largest_happiness_change <- mutate(largest_happiness_change, happiness_isos = happiness_isos)
largest_happiness_change <- mutate(largest_happiness_change, fill_info = fill_info)
countries <- left_join(largest_happiness_change, countries, by = c("happiness_isos" = "country_codes"))
ggplot(data = countries) +
scale_color_brewer(palette = "Set3") +
geom_polygon(mapping = aes(x = long, y = lat, fill = fill_info))
View(countries)
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change))
View(largest_happiness_change)
if(top_n(largest_happiness_change, 5)) {
largest_happiness_change$fill_info = TRUE;
} else {
largest_happiness_change$fill_info = FALSE;
}
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
select(Country)
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
select(Country)
View(largest_happiness_change)
runApp()
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
View(largest_happiness_change)
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change))
View(largest_happiness_change)
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
mutate(fill_info = ifelse(top_n(5), TRUE, FALSE))
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
mutate(fill_info = ifelse(top_n(5), 1, 0))
get_world_data_with_highlights <- function(regions_highlight) {
map_data('world') %>%
fortify() %>%
mutate(highlight = ifelse(region %in% regions_highlight, 1, 0))
}
mapping_data <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
ggplot() +
geom_map(data = mapping_data,
map = mapping_data,
aes(x = long, y = lat, group = group, map_id = region, fill = highlight)) +
theme(legend.position = "none")
get_world_data_with_highlights <- function(regions_highlight) {
map_data('world') %>%
fortify() %>%
mutate(highlight = ifelse(region %in% regions_highlight, 1, 0))
}
mapping_data <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
get_world_data_with_highlights <- function(regions_highlight) {
map_data('world') %>%
fortify() %>%
mutate(highlight = ifelse(region %in% regions_highlight, 1, 0))
}
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
mapping_data <- get_world_data_with_highlights(largest_happiness_change)
ggplot() +
geom_map(data = mapping_data,
map = mapping_data,
aes(x = long, y = lat, group = group, map_id = region, fill = highlight)) +
theme(legend.position = "none")
mapping_data <- get_world_data_with_highlights(largest_happiness_change)
View(mapping_data)
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
mapping_data <- get_world_data_with_highlights(largest_happiness_change)
is.vector(mapping_data)
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(5) %>%
select(Country)
as.vector(largest_happiness_change)
is.reactivevalues(largest_happiness_change)
unlist(largest_happiness_change)
View(largest_happiness_change)
is.vector(largest_happiness_change)
largest_happiness_change <- unlist(largest_happiness_change)
is.vector(largest_happiness_change)
get_world_data_with_highlights <- function(regions_highlight) {
map_data('world') %>%
fortify() %>%
mutate(highlight = ifelse(region %in% regions_highlight, 1, 0))
}
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(5) %>%
select(Country)
largest_happiness_change <- unlist(largest_happiness_change)
mapping_data <- get_world_data_with_highlights(largest_happiness_change)
ggplot() +
geom_map(data = mapping_data,
map = mapping_data,
aes(x = long, y = lat, group = group, map_id = region, fill = highlight)) +
theme(legend.position = "none")
runApp()
# Tal Wolman, Ben Weber, Ivan Trindev, Cooper Teixeira
# INFO 201 Final Project
# TA: Andrey Butenko
# Section AE
# March 8, 2019
library("knitr")
library("jsonlite")
library("httr")
library("shiny")
library("ggplot2")
library("dplyr")
library("tidyr")
library("maps")
source("analysis.R")
server <- function(input, output) {
# please comment on your code so we know what code corresponds to what problem!!
# thank you!
get_world_data_with_highlights <- function(regions_highlight) {
map_data('world') %>%
fortify() %>%
mutate(highlight = ifelse(region %in% regions_highlight, 1, 0))
}
# Tal - add description of code
output$map1 <- renderPlot({
# get_world_data_with_highlights <- function(regions_highlight) {
#   map_data('world') %>%
#     fortify() %>%
#     mutate(highlight = ifelse(region %in% regions_highlight, 1, 0))
# }
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(input$countries) %>%
select(Country)
largest_happiness_change <- unlist(largest_happiness_change)
mapping_data <- get_world_data_with_highlights(largest_happiness_change)
ggplot() +
geom_map(data = mapping_data,
map = mapping_data,
aes(x = long, y = lat, group = group, map_id = region, fill = highlight)) +
theme(legend.position = "none")
})
output$map2 <- renderPlot({
largest_economy_change <- world_happiness_2015_2017 %>%
arrange(abs(Economy_change)) %>%
top_n(input$countries) %>%
select(Country)
largest_economy_change <- unlist(largest_economy_change)
mapping_data <- get_world_data_with_highlights(largest_economy_change)
ggplot() +
geom_map(data = mapping_data,
map = mapping_data,
aes(x = long, y = lat, group = group, map_id = region, fill = highlight)) +
theme(legend.position = "none")
})
# Ben - add description of code
# add code here and delete this comment
# Ivan - add description of code
# add code here and delete this comment
# Cooper - add description of code
# add code here and delete this comment
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Tal Wolman, Ben Weber, Ivan Trindev, Cooper Teixeira
# INFO 201 Final Project
# TA: Andrey Butenko
# Section AE
# March 8, 2019
library(dplyr)
library(knitr)
library(jsonlite)
library(httr)
# read and process csv file for happiness data
world_happiness_data <- read.csv(file = "Data/2017.csv", stringsAsFactors = FALSE)
filtered_world_happiness_data <- select(world_happiness_data, Country, Happiness.Rank, Happiness.Score, Economy..GDP.per.Capita.) %>%
filter(Happiness.Score > 7)
happiness_col_names <- c("Country Name", "Happiness Rank", "Happiness Score", "Economy")
colnames(filtered_world_happiness_data) <- happiness_col_names
# read and process data from World Bank by fetching from API
base_uri <- "http://api.worldbank.org/v2/"
response <- GET(paste0(base_uri, "country"), query = list("format" = "json", "per_page" = "350"))
response_information <- content(response, "text")
parsed_body_information <- fromJSON(response_information)
data_for_world <- flatten(parsed_body_information[[2]]) %>% filter(!grepl("Aggregates", region.value))
filtered_data_for_europe_central_asia <- select(data_for_world, id, name, region.value, incomeLevel.value) %>%
filter(region.value == "Europe & Central Asia")
europe_asia_col_names <- c("ID", "Country Name", "Region Name", "Income Level")
colnames(filtered_data_for_europe_central_asia) <- europe_asia_col_names
# Change colnames in data set
world_happiness_crucial_col_names <- c("Country", "Score", "Economy", "Family", "Health", "Freedom", "Generosity", "Gov.Trust")
colnames(world_happiness_crucial_info) <- world_happiness_crucial_col_names
# Create summary for crucial world happiness information
world_happiness_summary <- summary(world_happiness_crucial_info %>% select(-Country))
# Create a numeric representation of the income levels of countries
data_for_world_ex <- data_for_world %>% mutate(income_as_numeric = ifelse(grepl("HIC", incomeLevel.id), "6",
ifelse(grepl("UMC", incomeLevel.id), 5,
ifelse(grepl("MIC", incomeLevel.id), 4,
ifelse(grepl("LMC", incomeLevel.id), 3,
ifelse(grepl("LMY", incomeLevel.id), 2,
ifelse(grepl("LIC", incomeLevel.id), 1, NA)
)
)
)
)
))
data_for_world_ex$income_as_numeric <- as.numeric(data_for_world_ex$income_as_numeric)
world_income_summary <- summary(data_for_world_ex %>% select(income_as_numeric) %>% na.omit())
# Join the happiness data and income data by country name
joined_data <- left_join(data_for_world_ex, world_happiness_crucial_info, by = c("name" = "Country")) %>% na.omit()
# Find the saddest country that is in the high income level bracket
saddest_rich_country <- joined_data %>% filter(income_as_numeric == 6) %>% filter(Score == min(Score)) %>% select(name)
# Arrange the data by which countries have the largest difference in their income level and happiness score
arranged_data <- joined_data %>% mutate(income_happiness_diff = income_as_numeric - Score) %>% arrange(desc(income_happiness_diff))
# Group data by income level and find average happiness score
average_happiness_by_income_level <- joined_data %>%
group_by(incomeLevel.value) %>%
summarize(average_happiness = mean(Score)) %>%
arrange(average_happiness)
# Find the average happiness level and income level for each region
average_happiness_income_by_region <- joined_data %>%
group_by(region.value) %>%
summarize(
average_happiness = mean(Score),
average_income = mean(income_as_numeric)
) %>%
arrange(average_income)
# Join the 2015 and 2017 happiness data
world_happiness_data_2015 <- read.csv(file = "Data/2015.csv", stringsAsFactors = FALSE)
world_happiness_2015_2017 <- left_join(world_happiness_data_2015, world_happiness_data, by = "Country")
# Find the difference in economy and happiness in the two years
world_happiness_2015_2017 <- world_happiness_2015_2017 %>%
select(Country, Happiness.Score.x, Economy..GDP.per.Capita..x, Happiness.Score.y, Economy..GDP.per.Capita..y) %>%
mutate(
Happiness_change = Happiness.Score.y - Happiness.Score.x,
Economy_change = Economy..GDP.per.Capita..y - Economy..GDP.per.Capita..x
)
# Find the top 5 countries with largest happiness change
largest_happiness_change <- world_happiness_2015_2017 %>%
arrange(abs(Happiness_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
# Find the top 5 countries with largest economic change
largest_economy_change <- world_happiness_2015_2017 %>%
arrange(abs(Economy_change)) %>%
top_n(5) %>%
select(Country) %>%
as.vector()
# read and process csv file for happiness data
world_happiness_data <- read.csv(file = "Data/2017.csv", stringsAsFactors = FALSE)
filtered_world_happiness_data <- select(world_happiness_data, Country, Happiness.Rank, Happiness.Score, Economy..GDP.per.Capita.) %>%
filter(Happiness.Score > 7)
happiness_col_names <- c("Country Name", "Happiness Rank", "Happiness Score", "Economy")
colnames(filtered_world_happiness_data) <- happiness_col_names
# read and process data from World Bank by fetching from API
base_uri <- "http://api.worldbank.org/v2/"
response <- GET(paste0(base_uri, "country"), query = list("format" = "json", "per_page" = "350"))
response_information <- content(response, "text")
parsed_body_information <- fromJSON(response_information)
data_for_world <- flatten(parsed_body_information[[2]]) %>% filter(!grepl("Aggregates", region.value))
filtered_data_for_europe_central_asia <- select(data_for_world, id, name, region.value, incomeLevel.value) %>%
filter(region.value == "Europe & Central Asia")
europe_asia_col_names <- c("ID", "Country Name", "Region Name", "Income Level")
colnames(filtered_data_for_europe_central_asia) <- europe_asia_col_names
# Change colnames in data set
world_happiness_crucial_col_names <- c("Country", "Score", "Economy", "Family", "Health", "Freedom", "Generosity", "Gov.Trust")
colnames(world_happiness_crucial_info) <- world_happiness_crucial_col_names
# Create summary for crucial world happiness information
world_happiness_summary <- summary(world_happiness_crucial_info %>% select(-Country))
runApp()
install.packages("gridExtra")
library(gridExtra)
runApp()
runApp()
library("gridExtra")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
