print("Do the reading!")
print("Do the reading!")
print("Hello World")
2+1+0
2 + 0 + 1
print("Hello World")
print("Do the reading!")
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Sofia"
# Assign your name to the variable `my_name`
my_name <- "Ivan"
# Assign your height (in inches) to a variable `my_height`
my_height <- 68
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 100
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Sofia"
# Assign your name to the variable `my_name`
my_name <- "Ivan"
# Assign your height (in inches) to a variable `my_height`
my_height <- 68
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 101
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Sofia"
# Assign your name to the variable `my_name`
my_name <- "Ivan"
# Assign your height (in inches) to a variable `my_height`
my_height <- 68
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 101
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 // puppy_price
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 % puppy_price
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 %% puppy_price
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000% / %puppy_price
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000%/%puppy_price
10%/%1
1000%/%100
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Sofia"
# Assign your name to the variable `my_name`
my_name <- "Ivan"
# Assign your height (in inches) to a variable `my_height`
my_height <- 68
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 100
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000%/%puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Sofia"
# Assign your name to the variable `my_name`
my_name <- "Ivan"
# Assign your height (in inches) to a variable `my_height`
my_height <- 68
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 101
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000%/%puppy_price
# Get the bills introduced by a certain senator
get_recently_introduced_bills <- function(name) {
senator_info <- get_senator_info(name)
member_id <- senator_info$id
uri <- paste0(base_uri, "/members/", member_id, "/bills/introduced.json")
response <- GET(uri, add_headers('X-API-Key' = propublica_key))
response_text <- content(response, "text")
response_data <- fromJSON(response_text)
response_df <- response_data$results$bills[[1]] %>%
select(bill_id, short_title)
}
get_recently_introduced_bills("Patty Murray")
# Get information about a specific senator
get_senator_info <- function(name) {
member_list_uri <- paste0(base_uri, member_list_endpoint)
members_list_result <- GET(member_list_uri, add_headers('X-API-Key' = propublica_key))
members_list_result_text <- content(members_list_result, "text")
members_list_result_data <- fromJSON(members_list_result_text)
members_list_result_df <- members_list_result_data$results$members[[1]]
senator_info <- filter(members_list_result_df, first_name == word(name, 1), last_name == word(name, -1)) %>%
select(first_name, middle_name, last_name, party, state, twitter_account, facebook_account, phone, fax, id)
as.list(senator_info)
}
get_recently_introduced_bills("Patty Murray")
library("httr")
library("jsonlite")
library("dplyr")
library("stringr")
source("apikeys.R")
# Create variable storing base URI
base_uri <- "https://api.propublica.org/congress/v1/"
# Endpoint for searching bills
bill_search_endpoint <- "bills/search.json?query="
# End point for 116th senate member list
member_list_endpoint <- "116/senate/members.json"
#Endpoint for the last 20 senate votes
recent_vote_endpoint <- "senate/votes/recent.json"
# GET dataframe for a given topic
get_bills_on_topic <- function(topic) {
uri <- paste0(base_uri, bill_search_endpoint, topic)
response <- GET(uri, add_headers('X-API-Key' = propublica_key))
response_text <- content(response, "text")
response_data <- fromJSON(response_text)
response_df <- response_data$results$bills[[1]]
response_df <- select(response_df, bill_id, short_title, sponsor_name, sponsor_state, sponsor_party, latest_major_action, govtrack_url)
top_n(response_df, 10)
}
# Get information about a specific bill
get_bill_information <- function(bill_id, congress_number) {
uri <- paste0(base_uri, congress_number, "/bills/", bill_id, ".json")
result <- GET(uri, add_headers('X-API-Key' = propublica_key))
result_text <- content(result, "text")
result_data <- fromJSON(result_text)
result_df <- result_data$results
result_list <- as.list(result_df)
}
# Get information about a specific senator
get_senator_info <- function(name) {
member_list_uri <- paste0(base_uri, member_list_endpoint)
members_list_result <- GET(member_list_uri, add_headers('X-API-Key' = propublica_key))
members_list_result_text <- content(members_list_result, "text")
members_list_result_data <- fromJSON(members_list_result_text)
members_list_result_df <- members_list_result_data$results$members[[1]]
senator_info <- filter(members_list_result_df, first_name == word(name, 1), last_name == word(name, -1)) %>%
select(first_name, middle_name, last_name, party, state, twitter_account, facebook_account, phone, fax, id)
as.list(senator_info)
}
# Get the bills introduced by a certain senator
get_recently_introduced_bills <- function(name) {
senator_info <- get_senator_info(name)
member_id <- senator_info$id
uri <- paste0(base_uri, "/members/", member_id, "/bills/introduced.json")
response <- GET(uri, add_headers('X-API-Key' = propublica_key))
response_text <- content(response, "text")
response_data <- fromJSON(response_text)
response_df <- response_data$results$bills[[1]] %>%
select(bill_id, short_title)
}
get_recently_introduced_bills("Patty Murray")
# Get the last 20 most recent vote majority position for the opposing party
get_opposing_majority_position <- function(name) {
uri <- paste0(base_uri, recent_vote_endpoint)
result <- GET(uri, add_headers('X-API-Key' = propublica_key))
result_text <- content(result, "text")
result_data <- fromJSON(result_text)
senator_info <- get_senator_info(name)
if (senator_info$party == "D") {
result_df <- result_data$results$votes$republican
}
else {
result_df <- result_data$results$votes$democratic
}
select(result_df, majority_position)
}
# Get the voting position for a given senator for the 20 most recent votes
get_senator_vote_positions <- function(name) {
senator_info <- get_senator_info(name)
member_id <- senator_info$id
uri <- paste0(base_uri, "members/", member_id, "/votes.json")
result <- GET(uri, add_headers('X-API-Key' = propublica_key))
result_text <- content(result, "text")
result_data <- fromJSON(result_text)
result_df <- result_data$results$votes[[1]]
select(result_df, position)
}
# Compare the majority position of the opposing party to the voting position of a given senator
# For the most recent 20 votes
compare_senator_vote_to_opposing_majority <- function(name) {
opposing_majority <- get_opposing_majority_position(name)
senator_position <- get_senator_vote_positions(name)
opposing_majority_vector <- as.vector(opposing_majority$majority_position)
senator_position_vector <- as.vector(senator_position$position)
comparison_vector <- opposing_majority_vector == senator_position_vector
true_count <- length(comparison_vector[comparison_vector == TRUE])
(true_count/20) * 100
}
get_recently_introduced_bills("Patty Murray")
print(propublica_key)
source("apikeys.R")
shiny::runApp('Info201/info201-final-project')
shiny::runApp()
# load and rename world population data
pop_data <- read.csv("data/world_pop.csv", stringsAsFactors = F) %>%
select(Country.Name, X2015, X2016, X2017)
pop_data <- read.csv("data/world_pop.csv", stringsAsFactors = F)
View(pop_data)
View(pop_data)
runApp()
runApp()
